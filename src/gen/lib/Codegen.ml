(*
   Emit OCaml code for parsing.
*)

open Printf

let save filename data =
  let oc = open_out filename in
  output_string oc data;
  close_out oc

let mkpath opt_dir filename =
  match opt_dir with
  | None -> filename
  | Some dir -> Filename.concat dir filename

let generate_main ~ast_module_name ~parse_module_name =
  sprintf "\
(* Generated by ocaml-tree-sitter. *)

let () = Ocaml_tree_sitter_run.Main.run %s.parse %s.dump
"
    parse_module_name ast_module_name

let ocaml ?out_dir ?lang grammar =
  let lang_suffix =
    match lang with
    | None -> ""
    | Some s -> "_" ^ s
  in
  let ast_module_name = sprintf "AST%s" lang_suffix in
  let parse_module_name = sprintf "Parse%s" lang_suffix in
  let main_module_name = sprintf "Main%s" lang_suffix in
  let ast_file = mkpath out_dir (sprintf "%s.ml" ast_module_name) in
  let parse_file = mkpath out_dir (sprintf "%s.ml" parse_module_name) in
  let main_file = mkpath out_dir (sprintf "%s.ml" main_module_name) in

  let ast_code = Codegen_AST.generate grammar in
  let parse_code = Codegen_parse.generate grammar ~ast_module_name in
  let main_code = generate_main ~ast_module_name ~parse_module_name in
  save ast_file ast_code;
  save parse_file parse_code;
  save main_file main_code
