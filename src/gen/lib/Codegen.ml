(*
   Emit OCaml code for parsing.
*)

open Printf

let save filename data =
  let oc = open_out filename in
  output_string oc data;
  close_out oc

let make_dir path =
  if not (Sys.file_exists path) then
    Unix.mkdir path 0o777

let make_lib_dir opt_dir =
  let dir =
    match opt_dir with
    | None -> "lib"
    | Some path -> Filename.concat path "lib"
  in
  make_dir dir;
  dir

let make_bin_dir opt_dir =
  let dir =
    match opt_dir with
    | None -> "bin"
    | Some path -> Filename.concat path "bin"
  in
  make_dir dir;
  dir

let make_lib_path opt_dir filename =
  Filename.concat (make_lib_dir opt_dir) filename

let make_bin_path opt_dir filename =
  Filename.concat (make_bin_dir opt_dir) filename

let generate_main ~lib_module_name ~ast_module_name ~parse_module_name =
  sprintf "\
(* Generated by ocaml-tree-sitter. *)

open %s

let () = Tree_sitter_run.Main.run %s.parse %s.dump
"
    lib_module_name
    parse_module_name ast_module_name

let ocaml ?out_dir ~lang grammar =
  let ast_module_name = "AST" in
  let parse_module_name = "Parse" in
  let main_module_name = "Main" in
  let ast_file = make_lib_path out_dir (sprintf "%s.ml" ast_module_name) in
  let parse_file = make_lib_path out_dir (sprintf "%s.ml" parse_module_name) in
  let main_file = make_bin_path out_dir (sprintf "%s.ml" main_module_name) in
  let lib_module_name = sprintf "Tree_sitter_lang_%s" lang in

  let ast_code = Codegen_AST.generate grammar in
  let parse_code = Codegen_parse.generate grammar ~ast_module_name in
  let main_code =
    generate_main ~lib_module_name ~ast_module_name ~parse_module_name in
  save ast_file ast_code;
  save parse_file parse_code;
  save main_file main_code
