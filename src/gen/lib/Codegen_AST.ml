(*
   Code generator for the AST.ml file.
*)

open Printf
open AST_grammar
open Codegen_util
open Indent.Types

let trans = translate_ident

let preamble grammar =
  [
    Line (
      sprintf "\
(* Generated by ocaml-tree-sitter. *)
(*
   %s grammar

   entrypoint: %s
*)

open Ocaml_tree_sitter_run
"
        grammar.name
        grammar.entrypoint
    )
  ]

let rec format_body body : Indent.t =
  match body with
  | Symbol (ident, None) -> [Line (trans ident)]
  | Symbol (_ident, Some alias) -> [Line (trans alias.id)]
  | String s -> [Line (sprintf "(Loc.t * string (* %S *))" s)]
  | Pattern s ->
      let pattern_string =
        sprintf "%S" s
        |> Codegen_util.safe_comment
      in
      [Line (sprintf "(Loc.t * string (* %s pattern *))" pattern_string)]
  | Blank -> [Line "unit (* blank *)"]
  | Repeat body ->
      [
        Inline (format_body body);
        Block [Line "list (* zero or more *)"]
      ]
  | Repeat1 body ->
      [
        Inline (format_body body);
        Block [Line "list (* one or more *)"]
      ]
  | Choice body_list ->
      [
        Line "[";
        Inline (format_choice body_list);
        Line "]"
      ]
  | Optional body ->
      [
        Inline (format_body body);
        Block [Line "option"]
      ]
  | Seq body_list ->
      format_seq body_list

and format_choice l =
  List.mapi (fun i body ->
    let name = sprintf "Case%i" i in
    Block [
      Line (sprintf "| `%s of" name);
      Block [Block (format_body body)];
    ]
  ) l

and format_seq l =
  let prod =
    List.map (fun body -> Block (format_body body)) l
    |> interleave (Line "*")
  in
  match l with
  | [_] -> prod
  | _ -> [Paren ("(", prod, ")")]

let format_rule (rule : rule) : Indent.t list =
  let rule_name = rule.name in
  let rule_def =
    [
      Line (sprintf "%s =" (trans rule_name));
      Block (format_body rule.body);
    ]
  in
  let aliases =
    List.map (fun alias ->
      [
        Line (sprintf "%s = %s" (trans alias.id) (trans rule_name))
      ]
    ) rule.aliases
  in
  rule_def :: aliases

let ppx = [
  Line "[@@deriving show {with_path = false}]";
  Line "";
]

let format_types grammar =
  List.map (fun rule_group ->
    (List.map format_rule rule_group
     |> List.flatten
     |> Codegen_util.format_typedefs
    ) @ ppx
  ) grammar.rules
  |> List.flatten

let generate_dumper grammar =
  [
    Line "";
    Line (sprintf "let dump root =");
    Block [
      Line (sprintf "print_endline (show_%s root)"
              grammar.entrypoint);
    ]
  ]

let format grammar =
  [
    Inline (preamble grammar);
    Inline (format_types grammar);
    Inline (generate_dumper grammar);
  ]

let generate grammar =
  let tree = format grammar in
  Indent.to_string tree
