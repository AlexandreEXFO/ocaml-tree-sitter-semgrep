(*
   Type definitions for representing a raw tree-sitter grammar.json file.

   Allows reading and writing tree-sitter grammars in a type-safe manner.
*)

type ident = string

type grammar = {
  name: ident;
  rules: (ident * rule_body) list <json repr="object">;
  ~extras: rule_body list; (* tokens (can only be STRING or PATTERN) *)
  ~inline: ident list; (* rule names *)
  ~conflicts: ident list list; (* list of lists of rule names *)
  ~externals: ident list; (* list of token names *)
  ?word: ident option; (* token name *)
  ~supertypes: ident list; (* rule names *)
}

type rule_body = [
  | SYMBOL of ident
  | STRING of string
  | PATTERN of string
  | BLANK
  | REPEAT of rule_body
  | REPEAT1 of rule_body
  | CHOICE of rule_body list
  | SEQ of rule_body list
  | PREC of (int * rule_body)
  | PREC_DYNAMIC of (int * rule_body)
  | PREC_LEFT of (int nullable * rule_body)
  | PREC_RIGHT of (int nullable * rule_body)
  | FIELD of (ident * rule_body)
  | IMMEDIATE_TOKEN of rule_body (* presumably must contain a token *)
  | TOKEN of rule_body
] <json adapter.ocaml="Json_rule_adapter"> (* see Json_rule_adapter.ml *)
  <ocaml repr="classic">
