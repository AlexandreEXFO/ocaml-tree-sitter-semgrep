#
# Generic makefile to be symlinked or to be included at the root of the
# semgrep-* folders as follows:
#
#   include ../Makefile.common
#

PROJECT_ROOT = $(shell git rev-parse --show-toplevel)
NAME = $(shell pwd | xargs basename)

include $(PROJECT_ROOT)/tree-sitter-config.mk

# The folder containing the tree-sitter-* repos and semgrep-* folders
NODE_PATH := $(PROJECT_ROOT)/lang/semgrep-grammars/src:$(NODE_PATH) make
export NODE_PATH

# If grammar.js was present at a fixed location, we could define a simple
# make target like 'src/parser.c: grammar.js'.
.PHONY: build
build:
	$(MAKE) prep
	for dir in $$(find . -name grammar.js | xargs -I{} dirname {}); \
	do \
	  echo "Generate parser in $$(pwd)/$$dir"; \
	  if ! [ -e "$$dir/src/parser.c" ] \
	     || [ "$$dir/grammar.js" -nt "$$dir/src/parser.c" ]; then \
	    (cd "$$dir" && tree-sitter generate --no-bindings); \
	  else \
	    echo "$$dir/src/parser.c is up to date."; \
	  fi; \
	done

# Import, rename, patch etc. in a custom manner, as needed.
#
.PHONY: prep
prep:
	if [ -x prep ]; then ./prep; fi

.PHONY: test
test:
	# 'tree-sitter test' can emit a large number of repetitive error
	# messages when compiling 'parser.c'.
	set -e; \
	for dir in $$(find . | grep 'grammar.js$$' | xargs -L1 dirname); do \
	  echo "Test $$(pwd)/$$dir"; \
	  (cd "$$dir"; \
           show_log() { echo "..."; tail -n 1000 test.log; }; \
           if tree-sitter test > test.log 2>&1; then \
             show_log; \
           else \
             show_log; \
             exit 1; \
           fi); \
	done

.PHONY: clean
clean:
	git clean -dfX
