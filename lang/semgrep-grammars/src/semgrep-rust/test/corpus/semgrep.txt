=====================================
Metavariables
=====================================

impl $CLASS {
  pub fn $FUNC($PARAM: $TYPE) -> $RETTYPE {
    if $COND {
        $V1
    } else {
        $V2
    }
  }
}

---

(source_file
  (impl_item (type_identifier)
     (declaration_list
       (function_item (visibility_modifier) (identifier)
          (parameters (parameter (identifier) (type_identifier)))
	  (type_identifier)
	  (block (if_expression (identifier)
	  	 (block (identifier))
		 (else_clause (block (identifier)))))))))


=====================================
Ellipsis for expression
=====================================

impl Foo {
  fn bar() {
    let a = 0;
    ...;
    let b = 0;
  }
}

---

(source_file
  (impl_item (type_identifier)
     (declaration_list
        (function_item (identifier) (parameters)
	(block
	  (let_declaration (identifier) (integer_literal))
	  (ellipsis)
	  (let_declaration (identifier) (integer_literal)))))))


=====================================
Ellipsis for statements
=====================================

impl Foo {
  fn bar() {
    let a = 0;
    ...
    let b = 0;
  }
}

---

(source_file
  (impl_item (type_identifier)
    (declaration_list
      (function_item (identifier) (parameters)
        (block
	  (let_declaration (identifier) (integer_literal))
	  (ellipsis)
	  (let_declaration (identifier) (integer_literal)))))))


=====================================
Deep expression ellipsis
=====================================

impl Foo {
  fn bar() {
    let a = <... 0 ...>;
  }
}

---

(source_file
  (impl_item (type_identifier)
    (declaration_list
      (function_item (identifier) (parameters)
        (block (let_declaration (identifier) (deep_ellipsis (integer_literal))))))))

=====================================
Ellipsis for method / field chains
=====================================

fn foo() -> Result<i32, ()> {
    Builder::new()
        .add_value(31)
        .enable_bar()
        .run()
        .output_status
        .map_err(|x| ())
}

---

(source_file
  (function_item
    (identifier)
    (parameters)
    (generic_type
        (type_identifier)
        (type_arguments (primitive_type) (unit_type)))
    (block
      (call_expression
        (field_expression
          (field_expression
            (call_expression
              (field_expression
                (call_expression
                  (field_expression
                    (call_expression
                      (field_expression
                        (call_expression
                          (scoped_identifier
                            (identifier)
                            (identifier))
                          (arguments))
                        (field_identifier))
                      (arguments
                        (integer_literal)))
                    (field_identifier))
                  (arguments))
                (field_identifier))
              (arguments))
            (field_identifier))
          (field_identifier))
        (arguments
          (closure_expression
            (closure_parameters
              (identifier))
            (unit_expression)))))))

=====================================
Toplevel expression
=====================================

__SEMGREP_EXPRESSION
42

---

(source_file (semgrep_expression (integer_literal)))

=====================================
Toplevel single statement
=====================================

__SEMGREP_STATEMENT
let mut x = 0;

---

(source_file
  (semgrep_statement
    (let_declaration
      (mutable_specifier)
      (identifier)
      (integer_literal)
    )
  )
)

=====================================
Toplevel multiple statements
=====================================

__SEMGREP_STATEMENT
let mut x = 0;
let y = x * 2;

---

(source_file
  (semgrep_statement
    (let_declaration
      (mutable_specifier)
      (identifier)
      (integer_literal)
    )
    (let_declaration
      (identifier)
      (binary_expression
        (identifier)
        (integer_literal)
      )
    )
  )
)

=====================================
Argument ellipsis
=====================================

__SEMGREP_EXPRESSION
foo(...)

---

(source_file
  (semgrep_expression
    (call_expression
      (identifier)
      (arguments (ellipsis))
      )
    )
  )
