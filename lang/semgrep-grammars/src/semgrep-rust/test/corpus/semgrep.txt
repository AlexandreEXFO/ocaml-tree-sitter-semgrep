=====================================
Metavariables
=====================================

impl $CLASS {
  pub fn $FUNC($PARAM: $TYPE) -> $RETTYPE {
    if $COND {
        $V1
    } else {
        $V2
    }
  }
}

---

(source_file
  (item
    (impl_item
      (type_identifier)
      (impl_block
        (impl_block_item
          (visibility_modifier)
          (function_item
            (function_declaration
              (identifier)
              (parameters
                (parameter
                  (identifier)
                  (type_identifier)))
              (type_identifier))
            (block
              (if_expression
                (identifier) (block (identifier))
                (else_clause (block (identifier)))
                )
              )
            )
          )
        )
      )
    )
  )

=====================================
Ellipsis for expression
=====================================

impl Foo {
  fn bar() {
    let a = 0;
    ...;
    let b = 0;
  }
}

---

(source_file
  (item
    (impl_item
      (type_identifier)
      (impl_block
        (impl_block_item
          (function_item
            (function_declaration
              (identifier)
              (parameters))
            (block
              (let_declaration
                (identifier)
                (integer_literal))
              (ellipsis)
              (let_declaration
                (identifier)
                (integer_literal)
              )
            )
          )
        )
      )
    )
  )
)

=====================================
Ellipsis for statements
=====================================

impl Foo {
  fn bar() {
    let a = 0;
    ...
    let b = 0;
  }
}

---

(source_file
  (item
    (impl_item
      (type_identifier)
      (impl_block
        (impl_block_item
          (function_item
            (function_declaration
              (identifier)
              (parameters))
            (block
              (let_declaration
                (identifier)
                (integer_literal))
              (ellipsis)
              (let_declaration
                (identifier)
                (integer_literal)
              )
            )
          )
        )
      )
    )
  )
)

=====================================
Deep expression ellipsis
=====================================

impl Foo {
  fn bar() {
    let a = <... 0 ...>;
  }
}

---

(source_file
  (item
    (impl_item
      (type_identifier)
      (impl_block
        (impl_block_item
          (function_item
            (function_declaration
              (identifier)
              (parameters))
            (block
              (let_declaration
                (identifier)
                (deep_ellipsis
                  (integer_literal)
                )
              )
            )
          )
        )
      )
    )
  )
)

=====================================
Toplevel expression
=====================================

__SEMGREP_EXPRESSION
42

---

(source_file (semgrep_expression (integer_literal)))

=====================================
Toplevel single statement
=====================================

__SEMGREP_STATEMENT
let mut x = 0;

---

(source_file
  (semgrep_statement
    (let_declaration
      (mutable_specifier)
      (identifier)
      (integer_literal)
    )
  )
)

=====================================
Toplevel multiple statements
=====================================

__SEMGREP_STATEMENT
let mut x = 0;
let y = x * 2;

---

(source_file
  (semgrep_statement
    (let_declaration
      (mutable_specifier)
      (identifier)
      (integer_literal)
    )
    (let_declaration
      (identifier)
      (binary_expression
        (identifier)
        (integer_literal)
      )
    )
  )
)

=====================================
Argument ellipsis
=====================================

__SEMGREP_EXPRESSION
foo(...)

---

(source_file
  (semgrep_expression
    (call_expression
      (identifier)
      (arguments (ellipsis))
      )
    )
  )
