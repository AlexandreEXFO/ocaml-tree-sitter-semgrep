==========================================
Ellipsis
==========================================

...

---

(parser_output
  (semgrep_ellipsis))

==========================================
Top level statements
==========================================

foo();
...
bar();

---

(parser_output
  (expression_statement
    (method_invocation
      (identifier)
      (argument_list)))
  (semgrep_ellipsis)
  (expression_statement
    (method_invocation
      (identifier)
      (argument_list))))

==========================================
Top level public constructor
==========================================

public Foo(...) { }

---

(parser_output
  (constructor_declaration
    (modifiers
      (modifier))
    (identifier)
    (formal_parameters
      (formal_parameter
        (semgrep_ellipsis)))
    (constructor_body)))

==========================================
Top level bare constructor
==========================================

Foo(...) { }

---

(parser_output
  (constructor_declaration
    (identifier)
    (formal_parameters
      (formal_parameter
        (semgrep_ellipsis)))
    (constructor_body)))

==========================================
Constructor body ellipsis
==========================================

public Foo(...) {
  ...
}

---

(parser_output
  (constructor_declaration
    (modifiers
      (modifier))
    (identifier)
    (formal_parameters
      (formal_parameter
        (semgrep_ellipsis)))
    (constructor_body
      (semgrep_ellipsis))))

==========================================
Ellipsis args
==========================================

foo(..., 5)

---

(parser_output
  (method_invocation
    (identifier)
    (argument_list
      (semgrep_ellipsis)
      (int))))

==========================================
Ellipsis in if
==========================================

if (...) {
  ...
}

---

(parser_output
  (if_statement
    (parenthesized_expression
      (semgrep_ellipsis))
    (block
      (semgrep_ellipsis))))

==========================================
Metavariable
==========================================

class $X {
  $X() { }
  void $ASDF() {
    int $QWERTY = $UIOP;
  }
}

---

(parser_output
  (class_declaration
    (identifier)
    (class_body
      (constructor_declaration
        (identifier)
        (formal_parameters)
        (constructor_body))
      (method_declaration
        (void_type)
        (identifier)
        (formal_parameters)
        (block
          (local_variable_declaration
            (type_identifier)
            (variable_declarator
              (identifier)
              (assignment_operator)
              (identifier))))))))

==========================================
Class header
==========================================

GlObAl without sharing cLaSs $A extends $SUPER implements $I1, $I2

---

(parser_output
  (modifiers
    (modifier)
    (modifier))
  (identifier)
  (superclass
    (type_identifier))
  (interfaces
    (type_list
      (type_identifier)
      (type_identifier))))

==========================================
Method header
==========================================

public override void printName()

---

(parser_output
  (modifiers
    (modifier)
    (modifier))
  (void_type)
  (identifier)
  (formal_parameters))

==========================================
IF right-associativity
==========================================

if (true)
  if (true)
    x;
  else
    x;

---

(parser_output
  (if_statement
    (parenthesized_expression
      (boolean))
    (if_statement
      (parenthesized_expression
        (boolean))
      (expression_statement
        (identifier))
      (expression_statement
        (identifier)))))

==========================================
Partial IF
==========================================

iF (true)

---

(parser_output
  (if_statement
    (parenthesized_expression
      (boolean))))

==========================================
Partial TRY
==========================================

tRy {
  insert a;
}

---

(parser_output
  (block
    (expression_statement
      (dml_expression
        (dml_type)
        (identifier)))))

==========================================
FINALLY clause
==========================================

finallY {
  Boolean finallyRan = true;
}

---

(parser_output
  (finally_clause
    (block
      (local_variable_declaration
        (type_identifier)
        (variable_declarator
          (identifier)
          (assignment_operator)
          (boolean))))))
