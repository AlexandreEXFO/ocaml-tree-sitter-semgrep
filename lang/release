#! /usr/bin/env bash
#
# Place the generated files into their own repo, to be used by an external
# repo as a submodule.
#
set -eu

langs=("$@")

if [[ ! -d ocaml-tree-sitter-lang ]]; then
  git clone git@github.com:returntocorp/ocaml-tree-sitter-lang.git
fi
# Stay on whatever branch is checked out.

repo="ocaml-tree-sitter-lang"

# Copy the files that we find.
#
for lang in "${langs[@]}"; do
  if [[ -d "$lang"/ocaml-src ]]; then
    dst="$repo"/"$lang"
    mkdir -p "$dst"
    cp -a "$lang"/ocaml-src/lib "$dst"
    cp -a "$lang"/ocaml-src/bin "$dst"
    if [[ -d "$lang"/orig ]]; then
      mkdir -p "$dst"/orig
    fi
    if [[ -f "$lang"/orig/grammar.js ]]; then
      cp -a "$lang"/orig/grammar.js "$dst"/orig
    fi
    if [[ -f "$lang"/orig/LICENSE ]]; then
      cp -a "$lang"/orig/LICENSE "$dst"/orig
    fi
  fi
done

id=$(git rev-parse --short HEAD)
if [[ -n "$(git status --porcelain)" ]]; then
  cat 2>&1 <<EOF
git status is not clean.
Please add and commit files until 'git status' shows a clean status,
then retry.
EOF
  exit 1
fi

(
  cd "$repo"
  git add .
  git status
  git commit -m "Release files generated by ocaml-tree-sitter $id."
  branch=$(git rev-parse --abbrev-ref HEAD)
  git push origin "$branch"
)
