#! /usr/bin/env bash
#
# Copy tree-sitter grammars from the semgrep-grammars repo into the current
# language directory.
#
set -eu

name=$(basename "$(pwd)")

# Location of pre-generated grammar.json. This is required
# if we're using an tree-sitter grammar.
#
# It is ignored if 'grammar.js' exists locally.
#
import_from=../semgrep-grammars/lang/"$name"

error() {
  cat >&2 <<EOF
Error: $*
EOF
  exit 1
}

# Generate C source code for the grammar, in two passes:
#
# 1. Import files from semgrep-grammars
# 1. Simplify grammar.json so it's compatible with ocaml-tree-sitter.
# 3. Generate 'parser.c' from the simplified 'grammar.json'.
#

if [[ -e grammar.js ]]; then
  echo "$name: Generating initial 'grammar.json' from 'grammar.js'."
  npx tree-sitter generate
else
  orig_grammar_json="$import_from"/src/grammar.json
  if [[ ! -e "$orig_grammar_json" ]]; then
    cat >&2 <<EOF
Missing local 'grammar.js' and missing '$orig_grammar_json'.
One of these files must exist.
EOF
    exit 1
  else
    echo "$name: Importing initial 'grammar.json'."
    mkdir -p src
    cp -r "$import_from"/src/* src/
    rm -f src/parser.c
  fi
fi

echo "$name: Simplifying 'grammar.json' for ocaml-tree-sitter."
mv src/grammar.json src/grammar.json.orig
simplify-grammar < src/grammar.json.orig > src/grammar.json

echo "$name: Generating definitive 'parser.c'."
npx tree-sitter generate src/grammar.json
