#! /usr/bin/env bash
#
# Preprocess the original grammar file from a language like Ruby so as
# to produce a grammar that we can use.
#
set -eu -o pipefail

project_root=$(git rev-parse --show-toplevel)

scripts="$project_root"/scripts
node_bin="$project_root"/node_modules/.bin
tree_sitter="$node_bin"/tree-sitter
node_gyp="$node_bin"/node-gyp

error() {
  cat >&2 <<EOF
Error: $*
EOF
  exit 1
}

test -x "$tree_sitter" || error "missing executable $tree_sitter"
test -x "$node_gyp" || error "missing executable $node_gyp"
test -f "orig/grammar.js" || error "missing orig/grammar.js"

mkdir -p src

"$scripts"/simplify-grammar < orig/grammar.js > grammar.js

if [[ -f orig/scanner.cc ]]; then
  cp orig/scanner.cc src/
elif [[ -f orig/scanner.c ]]; then
  cp orig/scanner.c src/
fi

# Generate C source code for the grammar.
# Also generate 'grammar.json' used by the OCaml code generator.
#
"$tree_sitter" generate

# Compile the C code.
#
"$node_gyp" rebuild
