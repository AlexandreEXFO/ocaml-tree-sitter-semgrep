#! /usr/bin/env bash
#
# Generate OCaml parsers and run them on the json output of tree-sitter.
#
set -eux

project_root=$(git rev-parse --show-toplevel)
ocaml_tree_sitter="$project_root"/bin/ocaml-tree-sitter

error() {
  cat >&2 <<EOF
Error: $*
EOF
  exit 1
}

test -x "$ocaml_tree_sitter" || error "missing executable $ocaml_tree_sitter"

# Generate the OCaml code needed to parse the examples/*.out json files.
#
mkdir -p ocaml-src
"$ocaml_tree_sitter" src/grammar.json -d ocaml-src

# Compile the OCaml files into an executable that takes a json file
# and dumps the OCaml AST in some arbitrary format suitable for human review.
#
cat > ocaml-src/dune <<EOF
(executable
   (public_name parse)
   (preprocess (pps ppx_deriving.show))
   (libraries ocaml-tree-sitter.run)
)
EOF
touch ocaml-src/parse.opam

(
  cd ocaml-src
  dune build --root .
)

ln -sf ocaml-src/_build/install/default/bin/parse-part2 .

# Run the parser from json to ocaml AST
#
if [[ -d examples ]]; then
  for input in $(ls examples/*.out || :); do
    output=${input%.in}.out
    dump=${output%.in}.dump
    ./parse-part2 "$output" > "$dump"
  done
fi
