#! /usr/bin/env bash
#
# Generate all the code and output for a standard test.
#
# TODO: add options to skip some steps or turn it into a makefile so as to
#       not have to rerun everything everytime.
#
set -eu

project_root=$(git rev-parse --show-toplevel)

tree_sitter="$project_root"/node_modules/.bin/tree-sitter

error() {
  cat >&2 <<EOF
Error: $*
EOF
  exit 1
}

test -x "$tree_sitter" || error "missing executable $tree_sitter"

# Generate C source code for the grammar.
# Also generate 'grammar.json' used by the OCaml code generator.
#
"$tree_sitter" generate

# Compile the C code into a parser that dumps the AST derived from its input.
#
npm init -y
npm install

# This is the JavaScript wrapper used to call the parser.
# (see note inside of file about why we need to copy it)
#
cp "$project_root"/scripts/tree-sitter-parser.js .

# Run the parser generated by tree-sitter on sample inputs.
#
# All test input files must have extension .in regardless of their language,
# for simplicity.
# If you want to make the language visible, use e.g. 'hello.c.in'.
#
if [[ -d examples ]]; then
  for input in $(ls examples/*.in || :); do
    output=${input%.in}.out
    ./tree-sitter-parser.js "$input" | ydump > "$output"
  done
fi
