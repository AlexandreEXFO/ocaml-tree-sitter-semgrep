/* error: 
 intermediate2 not generated, but even if I provide an empty one, I get
 this error:

ad@yrax:~/github/ocaml-tree-sitter/tests/list_and_option$ dune runtest
Entering directory '/home/pad/github/ocaml-tree-sitter'
        test alias tests/list_and_option/runtest (exit 2)
(cd _build/default/tests/list_and_option && ./test.exe)
Parse CST in ../../../../tests/list_and_option/ex1.json
Fatal error: exception Failure("Wrong format: Bad, got: [\n  { \"type\": \"a_rule\", \"children\": [] },\n  { \"type\": \"b_rule\", \"children\": [] },\n  { \"type\": \"b_rule\", \"children\": [] },\n  { \"type\": \"b_rule\", \"children\": [] },\n  { \"type\": \"b_rule\", \"children\": [] },\n  { \"type\": \"d_rule\", \"children\": [] },\n  {\n    \"type\": \"e_rule_alias\",\n    \"children\": [ { \"type\": \"e_rule\", \"children\": [] } ]\n  },\n  {\n    \"type\": \"f_rule_alias\",\n    \"children\": [ { \"type\": \"f_rule\", \"children\": [] } ]\n  }\n]")
Raised at file "stdlib.ml", line 33, characters 17-33
Called from file "tests/list_and_option/test.re", line 8, characters 16-48
Called from file "tests/list_and_option/test.re" (inlined), line 15, characters 10-35
Called from file "tests/list_and_option/test.re", line 18, characters 8-14
*/


/* DO NOT MODIFY MANUALLY: Auto-generated by codegen_json_reader*/
open Ast
open Common;
module J = Json_type;

let error = (s, json) => 
    failwith(spf("Wrong format: %s, got: %s",s,Json_io.string_of_json(json)));

let rec parse_a_rule = (json: J.json_type): token => {
      switch(json) {
         | J.Object([("type", J.String("a_rule")),
                     ("children", _)]) => "a_rule"
         | J.Array([]) => ""
         | _ => error("Bad token", json)
      }
      }
and parse_b_rule = (json: J.json_type): token => {
      switch(json) {
         | J.Object([("type", J.String("b_rule")),
                     ("children", _)]) => "b_rule"
         | J.Array([]) => ""
         | _ => error("Bad token", json)
      }
      }
and parse_c_rule = (json: J.json_type): token => {
      switch(json) {
         | J.Object([("type", J.String("c_rule")),
                     ("children", _)]) => "c_rule"
         | J.Array([]) => ""
         | _ => error("Bad token", json)
      }
      }
and parse_d_rule = (json: J.json_type): token => {
      switch(json) {
         | J.Object([("type", J.String("d_rule")),
                     ("children", _)]) => "d_rule"
         | J.Array([]) => ""
         | _ => error("Bad token", json)
      }
      }
and parse_e_rule = (json: J.json_type): token => {
      switch(json) {
         | J.Object([("type", J.String("e_rule")),
                     ("children", _)]) => "e_rule"
         | J.Array([]) => ""
         | _ => error("Bad token", json)
      }
      }
and parse_e_rule_alias = (json: J.json_type): e_rule_alias => {
      switch(json) {
   | J.Array([
      J.Object([("type", J.String("e_rule")),
               ("children", local_var1)])
      ]) => (parse_e_rule(local_var1))
         | _ => error("Bad", json)
      }
      }
and parse_f_rule = (json: J.json_type): token => {
      switch(json) {
         | J.Object([("type", J.String("f_rule")),
                     ("children", _)]) => "f_rule"
         | J.Array([]) => ""
         | _ => error("Bad token", json)
      }
      }
and parse_f_rule_alias = (json: J.json_type): token => {
      switch(json) {
         | J.Object([("type", J.String("f_rule_alias")),
                     ("children", _)]) => "f_rule_alias"
         | J.Array([]) => ""
         | _ => error("Bad token", json)
      }
      }
and parse_identifier = (json: J.json_type): token => {
      switch(json) {
         | J.Object([("type", J.String("identifier")),
                     ("children", _)]) => "identifier"
         | J.Array([]) => ""
         | _ => error("Bad token", json)
      }
      }
and parse_intermediate1 = (json:  J.json_type): intermediate1 => {
            switch(json) {
               | J.Array(xs) =>  List.map(parse_b_rule, xs)
               | _ => error("Bad", json)
               }
               }

and parse_intermediate2 = json => {
    error("TODO", json)
}

and parse_program = (json: J.json_type): program => {
      switch(json) {
   | J.Array([
      J.Object([("type", J.String("a_rule")),
               ("children", local_var1)]),
      J.Object([("type", J.String("intermediate1")),
               ("children", local_var2)]),
      J.Object([("type", J.String("intermediate2")),
               ("children", local_var3)]),
      J.Object([("type", J.String("d_rule")),
               ("children", local_var4)]),
      J.Object([("type", J.String("e_rule_alias")),
               ("children", local_var5)]),
      J.Object([("type", J.String("f_rule_alias")),
               ("children", local_var6)])
      ]) => (parse_a_rule(local_var1),parse_intermediate1(local_var2),parse_intermediate2(local_var3),parse_d_rule(local_var4),parse_e_rule_alias(local_var5),parse_f_rule_alias(local_var6))
         | _ => error("Bad", json)
      }
      }
/*****************************************************************************/
/* Entrypoint */
/*****************************************************************************/
let parse = (file): Ast.program => {
    let json = Json_io.load_json(file);
    switch(json) {
    | J.Object(xs) => {
      let children = List.assoc("children",xs);
      parse_program(children)
    }
    | _ => error("Toplevel", json);
    }
}
